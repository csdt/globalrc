#! /bin/sh

# Grouping commands is mandatory in order to have the script in RAM
# and can finish its execution even if the file is rewritten
{

  VERSION="0.1"

  . "$GLOBALRC/lib.sh/stream.sh"
  . "$GLOBALRC/lib.sh/sync.sh"

  # Params
  host=
  use_master_co=1
  use_scp_trick=1
  use_compression=1
  port=

  #
  scp_pre_hooks=

  # Toggle hooks execution
  exec_local_pre_hook=1
  exec_local_post_hook=1
  exec_remote_pre_hook=1
  exec_remote_post_hook=1


  # compression control
  compression=

  # shell commands to execute on the remote machine to execute pre-sync hooks
  remote_pre_hook="$(generate_execute_hooks pre pull)"
  # shell commands to execute on the remote machine to execute post-sync hooks
  remote_post_hook="$(generate_execute_hooks post pull)"

  # print a little help
  print_usage () {
    echo "USAGE: $0 [--help|--version] [--verbose|--quiet|--fake] <hostname> [--master-co|--no-master-co] [--scp-trick|--no-scp-trick] [--compression|--no-compression] [--port portnumber]"
  }

  # Copy files of GLOBALRC dir to remote
  copy_files () {
    local path hooks
    hooks=
    path="$( echo "${1:-.globalrc}" | sed 's/\s/\\&/g;/./s:/*$:/.:')"

    if [ ${scp_pre_hooks:-0} != 0 ]
    then
      hooks="$(echo "$remote_pre_hook") &&" # command substitution removes trailing endline
    fi

    info "  Copy files from $host${port:+:$port}"
    if [ "${use_scp_trick:-0}" != 0 ]
    then
      FAKE_DISPLAY="scp -q $masterco $compression ${port:+-P $port} -r $host":\'\"'$(echo "$GLOBALRC").'\"\'" $GLOBALRC_DIR"
      if fake scp -q $masterco $compression ${port:+-P $port} -r "$host":'"$('"$remote_source$hooks"'
          echo "${GLOBALRC:-.globalrc}" | sed /./s:/*$:/.:       # echo GLOBALRC dir for copy
        )"' "$GLOBALRC_DIR"
      then
        info "      Files successfully copied"
        return 0
      fi
      warning "      Error when using scp trick"
      warning "    Trying again without scp trick"

      # Execute pre hooks via a classic connexion
      if [ ${scp_pre_hooks:-0} != 0 ] && [ "${exec_remote_pre_hook:-0}" != 0 ]
      then
        info "    Executing pre-sync remote hook scripts"
        if ! hook_remote_pre_sync
        then
          error "      Error encountered while executing pre-sync remote hook scripts"
          return 1
        fi
        info "      Successful execution"
      fi
    fi

    if fake scp -q $masterco $compression ${port:+-P $port} -r "$host":"$path" "$GLOBALRC_DIR"
    then
      info "      Files successfully copied"
      return 0
    fi
    error "      Copy failed"
    return 1
  }

  hook_remote_pre_sync () {
    [ "${exec_remote_pre_hook:-0}" = 0 ] && return 0
    FAKE_DISPLAY="ssh $masterco $compression -T ${port:+-p $port} $host '"'"$GLOBALRC"/hooks/sender-pull-pre-sync && "$GLOBALRC"/hooks/sender-pre-sync && "$GLOBALRC"/hooks/sender-pull-pre-copy'\'
    fake ssh $masterco $compression -T ${port:+-p $port} "$host" "$remote_source$remote_pre_hook"
  }

  # Execute hook scripts on both sides before copying files
  hook_pre_sync () {
    scp_pre_hooks=0
    # executing local hooks
    if [ "${exec_local_pre_hook:-0}" != 0 ]
    then
      info "    Executing pre-sync local hook scripts"
      if ! execute_hooks "$host" pre pull
      then
        error "      Error encountered while executing pre-sync local hook scripts"
        return 1
      fi
      info "      Successful execution"
    fi

    if [ "${exec_remote_pre_hook:-0}" != 0 ]
    then
      if [ -z "$masterco" -a ${use_scp_trick:-0} != 0 ]
      then
        warning "      No master connexion available"
        warning "      Remote hook scripts will be executed during the copy using the scp trick"
        scp_pre_hooks=1
        return 0
      fi

      # executing remote hooks
      info "    Executing pre-sync remote hook scripts"
      if ! hook_remote_pre_sync
      then
        error "      Error encountered while executing pre-sync remote hook scripts"
        return 1
      fi
      info "      Successful execution"
    fi
    return 0
  }

  # Execute hook scripts on both sides after copying files
  hook_post_sync () {
    # executing local hooks
    if [ "${exec_local_post_hook:-0}" != 0 ]
    then
      info "    Executing post-sync local hook scripts"
      if ! execute_hooks "$host" post pull
      then
        error "      Error encountered while executing post-sync local hook scripts"
        return 1
      fi
      info "      Successful execution"
    fi

    if [ "${exec_remote_pre_hook:-0}" != 0 ]
    then
      # executing remote hooks
      info "    Executing post-sync remote hook scripts"
      FAKE_DISPLAY="ssh $masterco $compression -T ${port:+-p $port} $host '"'"$GLOBALRC"/hooks/pull-post-copy && "$GLOBALRC"/hooks/pull-sync && "$GLOBALRC"/hooks/pull-post-sync'\'
      if ! fake ssh $masterco $compression -T ${port:+-p $port} "$host" "$remote_source$remote_post_hook"
      then
        error "      Error encountered while executing post-sync remote hook scripts"
        return 1
      fi
      info "      Successful execution"
    fi
    return 0
  }

  # Synchronize configuration from local to remote using a master connexion
  pull_with_master () {
    info "Synchronize the local configuration from $host${port:+:$port}"
    if ! establish_master_co
    then
      pull_without_master
      return $?
    fi

    if ! hook_pre_sync
    then
      error "Aborting"
      close_master
      return 1
    fi

    info ""
    info "  Getting the remote GLOBALRC path"
    FAKE_DISPLAY="ssh $masterco $compression -T ${port:+-p $port} $host '"'echo "$GLOBALRC"'\' fake :
    remote_path="$([ -n "$FAKE" ] && echo "~/.globalrc" || ssh $masterco $compression -T ${port:+-p $port} "$host" "$remote_source"'
      # echo GLOBALRC dir
      echo "${GLOBALRC:-.globalrc}" ;
    ')"
    if [ -z "$remote_path" ]
    then
      warning "    Failed to get remote path"
      warning '    Assuming "~/.globalrc"'
      remote_path=".globalrc"
    
    else
      info "    Successfully got remote path ($remote_path)"
    fi

    info ""
    if copy_files "$remote_path"
    then
      if ! hook_post_sync
      then
        close_master
        return 1
      fi
    else
      error "Aborting"
      close_master
      return 1
    fi

    info ""
    info "Synchronization was successful"
    info ""
    close_master
  }

  # Synchronize configuration from local to remote
  pull_without_master () {
    info "Synchronize the local configuration from $host${port:+:$port}"

    if ! hook_pre_sync
    then
      error "Aborting"
      return 1
    fi

    info ""
    if copy_files
    then
      if ! hook_post_sync
      then
        return 1
      fi
    else
      error "Aborting"
      return 1
    fi

    info ""
    info "Synchronization was successful"
    info ""
  }

  pull () {
    if [ -z "$host" ]
    then
      error "No hostname provided"
      return 1
    fi
    if [ ${use_compression:-0} != 0 ]
    then
      compression="-C"
    else
      compression=
    fi
    if [ ${use_master_co:-0} != 0 ]
    then
      pull_with_master
    else
      pull_without_master
    fi
    return $?
  }

  first_args=1
  require_first_args () {
    if [ ${first_args:-0} != 0 ]
    then
      return 0
    else
      error "$1 needs to be placed before any host options"
      error "Aborting"
      print_usage | error
      exit 1
    fi
  }

  while [ $# != 0 ]
  do
    arg="$1"
    shift
    case "$arg" in
      --local-pre-hook|--receiver-pre-hook)   exec_local_pre_hook=1   ;;
      --local-post-hook|--receiver-post-hook) exec_local_post_hook=1  ;;
      --remote-pre-hook|--sender-pre-hook)    exec_local_pre_hook=1   ;;
      --remote-post-hook|--sender-post-hook)  exec_remote_post_hook=1 ;;
      --no-local-pre-hook|--no-receiver-pre-hook)   exec_local_pre_hook=0   ;;
      --no-local-post-hook|--no-receiver-post-hook) exec_local_post_hook=0  ;;
      --no-remote-pre-hook|--no-sender-pre-hook)    exec_local_pre_hook=0   ;;
      --no-remote-post-hook|--no-sender-post-hook)  exec_remote_post_hook=0 ;;
      -s|--hooks)
        exec_local_pre_hook=1
        exec_local_post_hook=1
        exec_remote_pre_hook=1
        exec_remote_post_hook=1
        ;;
      -S|--no-hooks)
        exec_local_pre_hook=0
        exec_local_post_hook=0
        exec_remote_pre_hook=0
        exec_remote_post_hook=0
        ;;
      --local-hooks|--receiver-hooks)
        exec_local_pre_hook=1
        exec_local_post_hook=1
        ;;
      --no-local-hooks|--no-receiver-hooks)
        exec_local_pre_hook=0
        exec_local_post_hook=0
        ;;
      --remote-hooks|--sender-hooks)
        exec_remote_pre_hook=1
        exec_remote_post_hook=1
        ;;
      --no-remote-hooks|--no-sender-hooks)
        exec_remote_pre_hook=0
        exec_remote_post_hook=0
        ;;
      --pre-hooks)
        exec_local_pre_hook=1
        exec_remote_pre_hook=1
        ;;
      --post-hooks)
        exec_local_post_hook=1
        exec_remote_post_hook=1
        ;;
      -m|--master|--master-co)
        use_master_co=1
        first_args=0
        ;;
      -M|--no-master|--no-master-co)
        use_master_co=0
        ;;
      -t|--scp-trick)
        use_scp_trick=1
        first_args=0
        ;;
      -T|--no-scp-trick)
        use_scp_trick=0
        first_args=0
        ;;
      -c|--compression)
        use_compression=1
        first_args=0
        ;;
      -C|--no-compression)
        use_compression=0
        first_args=0
        ;;
      -p|--port)
        port="$1"
        shift
        first_args=0
        ;;
      -p=*|--port=*)
        port="$(echo "$arg" | sed 's/^.*=//')"
        first_args=0
        ;;
      -h|--host)
        if [ -n "$host" ]
        then
          error "You must provide only one host"
          exit 1
        fi
        host="$1"
        shift
        first_args=0
        ;;
      -h=*|--host=*)
        if [ -n "$host" ]
        then
          error "You must provide only one host"
          exit 1
        fi
        host="$(echo "$arg" | sed 's/^.*=//')"
        first_args=0
        ;;
      -v|--verbose)
        require_first_args "$arg"
        VERBOSE=1
        QUIET=
        ;;
      -q|--quiet)
        require_first_args "$arg"
        QUIET=1
        VERBOSE=
        ;;
      -f|--fake)
        require_first_args "$arg"
        FAKE=1
        ;;
      -?|--help)
        require_first_args "$arg"
        if [ $# != 0 ]
        then
          warning "Warning: all parameters after $arg are ignored"
        fi
        print_usage
        exit 0
        ;;
      --version)
        require_first_args "$arg"
        if [ $# != 0 ]
        then
          warning "Warning: all parameters after $arg are ignored"
        fi
        echo "$VERSION"
        exit 0
        ;;
      -*)
        error "Unknown option $arg"
        print_usage | error
        exit 1
        ;;
      *)
        if [ -n "$host" ]
        then
          error "You must provide only one host"
          exit 1
        fi
        host="$arg"
        first_args=0
        ;;
    esac
  done

  pull

  exit $?
}
